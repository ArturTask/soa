
package itmo.soa.services.jaxws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "KillersService", targetNamespace = "http://ws.services.soa.itmo/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface KillersService {


    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCaveId", targetNamespace = "http://ws.services.soa.itmo/", className = "itmo.soa.services.ws.GetCaveId")
    @ResponseWrapper(localName = "getCaveIdResponse", targetNamespace = "http://ws.services.soa.itmo/", className = "itmo.soa.services.ws.GetCaveIdResponse")
    @Action(input = "http://ws.services.soa.itmo/KillersService/getCaveIdRequest", output = "http://ws.services.soa.itmo/KillersService/getCaveIdResponse")
    public String getCaveId();

    /**
     * 
     * @param arg0
     * @return
     *     returns itmo.soa.services.ws.DefaultDto
     * @throws KeyManagementException_Exception
     * @throws NoSuchAlgorithmException_Exception
     * @throws UnrecoverableKeyException_Exception
     * @throws IOException_Exception
     * @throws DragonsServiceException_Exception
     * @throws KeyStoreException_Exception
     * @throws CertificateException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "killDragon", targetNamespace = "http://ws.services.soa.itmo/", className = "itmo.soa.services.ws.KillDragon")
    @ResponseWrapper(localName = "killDragonResponse", targetNamespace = "http://ws.services.soa.itmo/", className = "itmo.soa.services.ws.KillDragonResponse")
    @Action(input = "http://ws.services.soa.itmo/KillersService/killDragonRequest", output = "http://ws.services.soa.itmo/KillersService/killDragonResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/killDragon/Fault/IOException"),
        @FaultAction(className = DragonsServiceException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/killDragon/Fault/DragonsServiceException"),
        @FaultAction(className = UnrecoverableKeyException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/killDragon/Fault/UnrecoverableKeyException"),
        @FaultAction(className = CertificateException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/killDragon/Fault/CertificateException"),
        @FaultAction(className = NoSuchAlgorithmException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/killDragon/Fault/NoSuchAlgorithmException"),
        @FaultAction(className = KeyStoreException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/killDragon/Fault/KeyStoreException"),
        @FaultAction(className = KeyManagementException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/killDragon/Fault/KeyManagementException")
    })
    public DefaultDto killDragon(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws CertificateException_Exception, DragonsServiceException_Exception, IOException_Exception, KeyManagementException_Exception, KeyStoreException_Exception, NoSuchAlgorithmException_Exception, UnrecoverableKeyException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns itmo.soa.services.ws.DefaultDto
     * @throws KeyManagementException_Exception
     * @throws NoSuchAlgorithmException_Exception
     * @throws UnrecoverableKeyException_Exception
     * @throws IOException_Exception
     * @throws DragonsServiceException_Exception
     * @throws KeyStoreException_Exception
     * @throws CertificateException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "moveToCave", targetNamespace = "http://ws.services.soa.itmo/", className = "itmo.soa.services.ws.MoveToCave")
    @ResponseWrapper(localName = "moveToCaveResponse", targetNamespace = "http://ws.services.soa.itmo/", className = "itmo.soa.services.ws.MoveToCaveResponse")
    @Action(input = "http://ws.services.soa.itmo/KillersService/moveToCaveRequest", output = "http://ws.services.soa.itmo/KillersService/moveToCaveResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/moveToCave/Fault/IOException"),
        @FaultAction(className = DragonsServiceException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/moveToCave/Fault/DragonsServiceException"),
        @FaultAction(className = UnrecoverableKeyException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/moveToCave/Fault/UnrecoverableKeyException"),
        @FaultAction(className = CertificateException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/moveToCave/Fault/CertificateException"),
        @FaultAction(className = NoSuchAlgorithmException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/moveToCave/Fault/NoSuchAlgorithmException"),
        @FaultAction(className = KeyStoreException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/moveToCave/Fault/KeyStoreException"),
        @FaultAction(className = KeyManagementException_Exception.class, value = "http://ws.services.soa.itmo/KillersService/moveToCave/Fault/KeyManagementException")
    })
    public DefaultDto moveToCave(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws CertificateException_Exception, DragonsServiceException_Exception, IOException_Exception, KeyManagementException_Exception, KeyStoreException_Exception, NoSuchAlgorithmException_Exception, UnrecoverableKeyException_Exception
    ;

}
