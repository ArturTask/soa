labs for the 4 course of studies at university ITMO SOA 

# Лабораторная работа #3
**вариант 1227:**

Переработать веб-сервисы из лабораторной работы #2 таким образом, чтобы они реализовывали основные концепции микросервисной архитектуры. Для этого внести в оба сервиса -- "вызываемый" и "вызывающий" перечисленные ниже изменения.

**Изменения в "вызываемом" сервисе:**

* Разделить приложение на два модуля -- веб-приложение с веб-сервисом и EJB-jar с бизнес-компонентами.
* Переместить всю логику из класса сервиса в Stateless EJB. В классе сервиса оставить только обращение к методам бизнес-интерфейса. EJB-компонент должен быть доступен удалённо (иметь Remote-интерфейс).
* Сформировать на уровне сервера приложений пул компонентов EJB настраиваемой мощности, динамически расширяемый при увеличении нагрузки.
* Установить ПО Consul и настроить Service Discovery с его помощью. Сервис должен регистрироваться в Service Discovery в момент запуска.


**Изменения в "вызывающем" сервисе:**


* Переработать сервис, обеспечив возможность его развёртывания на платформе Spring Cloud.
* Использовать все основные компоненты архитектуры Spring Cloud: Config Service, Load Balancer, Service Discovery.
* В качестве Service Discovery использовать Eureka.
* В качестве балансировщика нагрузки использовать Ribbon.
* Все запросы к сервисам должны прокироваться через API Gateway. В качестве API Gateway использовать Zuul Proxy.
* Оба веб-сервиса и клиентское приложение должны сохранить полную совместимость с API, реализованными в рамках предыдущих лабораторных работ.


**Вопросы к защите лабораторной работы:**


* Микросервисная архитектура. Особенности реализации. Сходства и отличия от "обычной" СОА.
* Разработка сервисов в микросервисной архитектуре. Стандарты и технологии. Принципы декомпозиции приложений на микросервисы.
* Масштабируемость микросервисных приложений. Балансировщики нагрузки.
* Концепция Service Discovery. Подходы и технологические решения.
* Consul. Установка и конфигурация. Регистрация сервисов.
* Разработка микросервисов на Java EE. Реализация Service Discovery и балансировки нагрузки.
* Разработка микросервисов на Spring. Интеграция с балансировщиками нагрузки и провайдерами Serviсе Discovery.
* Spring Cloud. Особенности, отличия от "голого" Spring Boot. Spring Cloud Netflix.
