openapi: 3.0.3
info:
  title: lab 1 SOA by Artur and Kirill
  version: 1.0.11
tags:
  - name: dragon
    description: Dragon book 
    externalDocs:
      description: Find out more
      url: https://en.wikipedia.org/wiki/Dragon
  - name: killer
    description: I will kiss you
    
# Dragons:
paths:
  /dragons:
    get:
      tags:
        - dragon
      summary: get all Dragons
      description: GIVE THEM TO MEEEE
      operationId: getAllDragons
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                properties:
                  dragons:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dragon"

    post:
      tags:
        - dragon
      summary: Add a new dragon
      description: Brand new dragon SALE SALE
      operationId: addDragon
      requestBody:
        description: Create a new Dragon
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DragonWithoutId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dragon'          
        '400':
          description: Wrong input
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  
    put:
      tags:
        - dragon
      summary: Update an existing dragon
      description: Update an existing dragon by entity
      operationId: updateDragon
      requestBody:
        description: Update an existent dragon
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dragon'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dragon'          
        '400':
          description: Wrong input
        '404':
          description: Dragon not found
        
          
  /dragons/{dragon-id}:
    get:
      tags:
        - dragon
      summary: Come to me
      description: Get an existing dragon by Id
      operationId: getDragonById
      parameters:
        - in: path # not query
          name: dragon-id
          description: id of Dragonnnnnn
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dragon'          
        '404':
          description: Dragon not found
        '405':
          description: Invalid ID supplied
        
        
    
    delete:
      tags:
        - dragon
      summary: Let it DIE
      description: delete current Dragon
      operationId: deleteDragonById
      parameters:
        - name: dragon-id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 10
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultDto"
        '404':
          description: Dragon not found
        '405':
          description: Invalid ID supplied
        
      
  /dragons/age/average:
    post:
      tags:
        - dragon
      summary: get average age of all dragons
      description: how old are your dragons?
      operationId: getDragonsAverageAge
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  averageAge:
                    type: number
                    minimum: 0
                    example: 10
          
  /dragons/age/less/{dragon-age}:
    post:
      tags:
        - dragon
      summary: get all dragons less than current dragon-age
      description: get all dragons less than current dragon-age
      operationId: getDragonsByAge
      parameters:
        - name: dragon-age
          in: path
          required: true
          description: greater than 0
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1100
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  dragons:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dragon"
        "405":
          description: invalid dragon age
          
  /dragons/name/starts/{dragon-name}:
    post:
      tags:
        - dragon
      summary: get dragon by name
      description: we will give you ALL dragons names of witch start with your current dragon-name
      operationId: getDragonsByName
      parameters:
        - name: dragon-name
          in: path
          required: true
          description: beginning of Dragon name
          schema:
            type: string
          example: snoop
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                properties:
                  dragons:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dragon"
  
      
# Killers:
  
  /killers/dragons/{dragon-id}/kill:
    post:
      tags:
        - killer
      summary: :( dont fcking do it
      description: kill current Dragon
      operationId: killDragonById
      parameters:
        - name: dragon-id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 10
      responses:
        
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: number
                    format: int64
                    minimum: 100
                    maximum: 526
                    example: 200
                  descriprion:
                    type: string
                    example: Dragon killed
        '400':
          description: Invalid ID supplied
        "404":
          description: Dragon Not Found

  /killers/move-to-cave/{cave-id}:
    post:
      tags:
        - killer
      summary: move to another cave
      description: move team to another cave
      operationId: moveTeamToCave
      parameters:
        - name: cave-id
          in: path
          required: true
          description: cave id > 0
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 132
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Team/Cave not found
                
          
          
  
 
components:
  schemas:
    DefaultDto:
      type: object
      properties:
        status:
          type: number
          format: int64
          minimum: 100
          maximum: 526
          example: 200
        descriprion:
          type: string
          example: Successful operation
          
    DragonWithoutId:
      required:
        - name
        - coordinates
        - creationDate
        - color
        - type
      type: object
      properties:
        name:
          type: string
          example: snoopie
        coordinates:
          $ref: "#/components/schemas/Coordinates"
        age:
          type: integer
          format: int64
          minimum: 1
          example: 1000
        color:
          $ref: "#/components/schemas/Color"
        type:
          $ref: "#/components/schemas/DragonType"
        character:
          $ref: "#/components/schemas/DragonCharacter"
        cave:
          $ref: "#/components/schemas/DragonCaveWithoutId"

    
    Dragon:
      required:
        - id
        - name
        - coordinates
        - creationDate
        - color
        - type
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          example: 10
        name:
          type: string
          example: snoopie
        coordinates:
          $ref: "#/components/schemas/Coordinates"
        # photoUrls:
        #   type: array
        #   xml:
        #     wrapped: true
        #   items:
        #     type: string
        #     xml:
        #       name: photoUrl
        creationDate:
          $ref: "#/components/schemas/ZonedDateTime"
        age:
          type: integer
          format: int64
          minimum: 1
          example: 1000
        color:
          $ref: "#/components/schemas/Color"
        type:
          $ref: "#/components/schemas/DragonType"
        character:
          $ref: "#/components/schemas/DragonCharacter"
        cave:
          $ref: "#/components/schemas/DragonCave"

    
    Coordinates:
      required:
        - x
        - y
      type: object
      properties:
        x:
          type: integer
          format: int64
          example: 1
        y:
          type: integer
          format: int64
          example: 12
    ZonedDateTime:
      type: string
      example: "12.04.1935"
    
    Color:
      type: string
      enum:
        - GREEN
        - WHITE
        - RED
        - BLACK
      example: GREEN
    
    DragonType:
      type: string
      enum:
        - UNDERGROUND
        - AIR
        - FIRE
      
    DragonCharacter:
      type: string
      nullable: true
      enum:
        - GOOD
        - CHAOTIC
        - FICKLE
      example: null
    
    DragonCaveWithoutId:
      required:
        - numberOfTreasures
      type: object
      nullable: true
      properties:
        numberOfTreasures:
          type: integer
          format: int64
          minimum: 1
          example: 100
          
      
    DragonCave:
      required:
        - id
        - numberOfTreasures
      type: object
      nullable: true
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
        numberOfTreasures:
          type: integer
          format: int64
          minimum: 1
          example: 100
          
      